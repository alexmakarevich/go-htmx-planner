// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db_entities

import (
	"context"
	"database/sql"
	"time"
)

const addParticipant = `-- name: AddParticipant :many

INSERT INTO participations (
  user_id, event_id
) VALUES (
  ?, ?
)
RETURNING user_id, event_id
`

type AddParticipantParams struct {
	UserID  int64
	EventID int64
}

// PARTICIPATIONS
func (q *Queries) AddParticipant(ctx context.Context, arg AddParticipantParams) ([]Participation, error) {
	rows, err := q.db.QueryContext(ctx, addParticipant, arg.UserID, arg.EventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participation
	for rows.Next() {
		var i Participation
		if err := rows.Scan(&i.UserID, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCalendaEvent = `-- name: CreateCalendaEvent :one
INSERT INTO calendar_events (
  title, date_time, owner_id
) VALUES (
  ?, ?, ?
)
RETURNING id, title, date_time, owner_id
`

type CreateCalendaEventParams struct {
	Title    string
	DateTime time.Time
	OwnerID  int64
}

func (q *Queries) CreateCalendaEvent(ctx context.Context, arg CreateCalendaEventParams) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, createCalendaEvent, arg.Title, arg.DateTime, arg.OwnerID)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DateTime,
		&i.OwnerID,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id
) VALUES (
  ?, ?
)
RETURNING id, user_id
`

type CreateSessionParams struct {
	ID     string
	UserID int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_name, password
) VALUES (
  ?, ?
)
RETURNING id, user_name, password
`

type CreateUserParams struct {
	UserName string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserName, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.Password)
	return i, err
}

const deleteCalendaEvent = `-- name: DeleteCalendaEvent :exec
DELETE FROM calendar_events
WHERE id = ?
`

func (q *Queries) DeleteCalendaEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCalendaEvent, id)
	return err
}

const deleteParticipant = `-- name: DeleteParticipant :exec
DELETE FROM participations
WHERE user_id = ? AND event_id = ?
`

type DeleteParticipantParams struct {
	UserID  int64
	EventID int64
}

func (q *Queries) DeleteParticipant(ctx context.Context, arg DeleteParticipantParams) error {
	_, err := q.db.ExecContext(ctx, deleteParticipant, arg.UserID, arg.EventID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUser = `-- name: FindUser :one
SELECT id, user_name, password FROM users
WHERE user_name = ? AND password = ? LIMIT 1
`

type FindUserParams struct {
	UserName string
	Password string
}

func (q *Queries) FindUser(ctx context.Context, arg FindUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, arg.UserName, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.Password)
	return i, err
}

const getCalendarEvent = `-- name: GetCalendarEvent :one

SELECT id, title, date_time, owner_id FROM calendar_events
WHERE id = ? LIMIT 1
`

// EVENTS:
func (q *Queries) GetCalendarEvent(ctx context.Context, id int64) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, getCalendarEvent, id)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DateTime,
		&i.OwnerID,
	)
	return i, err
}

const getCalendarEventWithOwner = `-- name: GetCalendarEventWithOwner :one
SELECT calendar_events.id, calendar_events.title, calendar_events.date_time, calendar_events.owner_id, users.user_name as owner_name  FROM calendar_events LEFT JOIN users ON calendar_events.owner_id = users.id
WHERE calendar_events.id = ? LIMIT 1
`

type GetCalendarEventWithOwnerRow struct {
	ID        int64
	Title     string
	DateTime  time.Time
	OwnerID   int64
	OwnerName sql.NullString
}

func (q *Queries) GetCalendarEventWithOwner(ctx context.Context, id int64) (GetCalendarEventWithOwnerRow, error) {
	row := q.db.QueryRowContext(ctx, getCalendarEventWithOwner, id)
	var i GetCalendarEventWithOwnerRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DateTime,
		&i.OwnerID,
		&i.OwnerName,
	)
	return i, err
}

const getParticipantsByEventId = `-- name: GetParticipantsByEventId :many
SELECT users.id, users.user_name, users.password FROM participations INNER JOIN users ON participations.user_id = users.id
WHERE participations.user_id = ?
`

func (q *Queries) GetParticipantsByEventId(ctx context.Context, userID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getParticipantsByEventId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.UserName, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one

SELECT id, user_id FROM sessions
WHERE id = ? LIMIT 1
`

// SESSIONS:
func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getSessionWithUser = `-- name: GetSessionWithUser :one
SELECT sessions.id as session_id, sessions.user_id, users.user_name  FROM sessions INNER JOIN users ON sessions.user_id = users.id
WHERE sessions.id = ? LIMIT 1
`

type GetSessionWithUserRow struct {
	SessionID string
	UserID    int64
	UserName  string
}

func (q *Queries) GetSessionWithUser(ctx context.Context, id string) (GetSessionWithUserRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionWithUser, id)
	var i GetSessionWithUserRow
	err := row.Scan(&i.SessionID, &i.UserID, &i.UserName)
	return i, err
}

const getUser = `-- name: GetUser :one


SELECT id, user_name, password FROM users
WHERE id = ? LIMIT 1
`

// TODO: separate passwords cleanly
// USERS:
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.Password)
	return i, err
}

const listCalendaEvents = `-- name: ListCalendaEvents :many
SELECT id, title, date_time, owner_id FROM calendar_events
ORDER BY date_time
`

func (q *Queries) ListCalendaEvents(ctx context.Context) ([]CalendarEvent, error) {
	rows, err := q.db.QueryContext(ctx, listCalendaEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CalendarEvent
	for rows.Next() {
		var i CalendarEvent
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DateTime,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessions = `-- name: ListSessions :many
SELECT id, user_id FROM sessions
ORDER BY id
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_name, password FROM users
ORDER BY user_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.UserName, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersInRelationToThisEvent = `-- name: ListUsersInRelationToThisEvent :many

SELECT users.id, users.user_name, users.password, participations.event_id as event_id FROM users LEFT JOIN participations
ON participations.user_id = users.id AND participations.event_id = ?
`

type ListUsersInRelationToThisEventRow struct {
	ID       int64
	UserName string
	Password string
	EventID  sql.NullInt64
}

// -- name: ListUsersInRelationToThisEvent :many
// SELECT users.*, filtered_participations.event_id as event_id FROM users LEFT JOIN
// (
//
//	SELECT * from participations
//	WHERE event_id = ?
//
// ) as filtered_participations
// ON filtered_participations.user_id = users.id;
func (q *Queries) ListUsersInRelationToThisEvent(ctx context.Context, eventID int64) ([]ListUsersInRelationToThisEventRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersInRelationToThisEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersInRelationToThisEventRow
	for rows.Next() {
		var i ListUsersInRelationToThisEventRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Password,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCalendaEvent = `-- name: UpdateCalendaEvent :exec
UPDATE calendar_events
set title = ?,
date_time = ?,
owner_id = ?
WHERE id = ?
`

type UpdateCalendaEventParams struct {
	Title    string
	DateTime time.Time
	OwnerID  int64
	ID       int64
}

func (q *Queries) UpdateCalendaEvent(ctx context.Context, arg UpdateCalendaEventParams) error {
	_, err := q.db.ExecContext(ctx, updateCalendaEvent,
		arg.Title,
		arg.DateTime,
		arg.OwnerID,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set user_name = ?,
password = ?
WHERE id = ?
`

type UpdateUserParams struct {
	UserName string
	Password string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.UserName, arg.Password, arg.ID)
	return err
}
