package templs_event

import (
	"go-form/sqlc/db_entities"
	"strconv"
)

templ UpdateEvent(event *db_entities.GetCalendarEventWithOwnerRow,
	participants *[]db_entities.User,
	otherUsers *[]db_entities.User,
	selectedUsers *[]db_entities.User,
) {
	<script>
	// clear sear drop down when not focused
	document.addEventListener('click', e => {
		if (!document.getElementById("other-users-container").contains(e.target)) {
			const parent = document.getElementById('search-users-container')
			parent.replaceChildren()
		}
	});
</script>
	<h2>
		Update Event
	</h2>
	<div>
		<form hx-put={ "/htmx/updateEvent/" + strconv.FormatUint(uint64(event.ID), 10) } hx-swap="none">
			<div style="padding: 2em 1em;">Owner: { event.OwnerName.String }</div>
			<input
				name="title"
				placeholder="title"
				value={ event.Title }
				required
				onkeyup="this.setCustomValidity('') // reset the validation on keyup"
				hx-on:htmx:validation:validate="if(this.value.length < 1) {
                    this.setCustomValidity('The title must be at least 1 char long') // set the validation error
                    htmx.find('#example-form').reportValidity()          // report the issue
                }"
			/>
			<input type="datetime-local" name="date-time" value={ event.DateTime.Format("2006-01-02T03:04") }/>
			// TODO: enable update btn when there are changes
			<button type="submit">update</button>
		</form>
		<div id="participants-container" style="margin-bottom: 2rem;">
			<h3 style="margin-top: 2rem">participants</h3>
			if len(*participants) > 0 {
				@ParticipantList(&event.ID, participants)
			} else {
				none
			}
		</div>
		<div
			id="other-users-container"
			style="display: flex; flex-direction:column; justify-content:center; align-items:center"
		>
			<div style="display: flex; justify-content:center; align-items:center">
				<div>
					// swap=none - so that oob works
					<input
						type="search"
						name="search"
						placeholder="Begin Typing To Search Users..."
						hx-get={ "/htmx/searchParticipants/" + strconv.FormatUint(uint64(event.ID), 10) }
						hx-trigger="input changed delay:500ms, search, click"
						hx-indicator=".htmx-indicator"
						hx-swap="none"
						style="margin:0"
					/>
				</div>
				<button disabled id="invite-users" style="flex-shrink:0; align-self:baseline;">invite users </button>
			</div>
			<span class="htmx-indicator" style="position: absolute">
				Searching...
			</span>
			<ul id="selected-users-container" style=""></ul>
			<ul id="search-users-container" style=""></ul>
		</div>
	</div>
}

templ BaseUserList(eventId *int64, participants *[]db_entities.User, additionalTemp func(eventId *int64, user *db_entities.User) templ.Component) {
	<ul>
		for _, user := range *participants {
			<li>
				{ user.UserName }
				if additionalTemp != nil {
					@additionalTemp(eventId, &user)
				}
			</li>
		}
	</ul>
}

templ SearchAndSelectUsers(eventId *int64,
	potentialUsers *[]db_entities.User,
	selectedUsers *[]db_entities.User) {
	@SelectedList(eventId, selectedUsers)
	@SearchUserList(eventId, potentialUsers)
	if len(*selectedUsers) > 0 {
		<button
			hx-swap-oob="outerHTML:#invite-users"
			id="invite-users"
			style="flex-shrink:0; align-self:baseline;"
			hx-put={ "/htmx/inviteParticipants/" + strconv.FormatUint(uint64(*eventId), 10) }
		>invite users </button>
	} else {
		<button disabled hx-swap-oob="outerHTML:#invite-users" id="invite-users" style="flex-shrink:0; align-self:baseline;">
			invite users 
		</button>
	}
}

templ SelectedList(eventId *int64, participants *[]db_entities.User) {
	<ul class="select-ul" id="selected-users-container" hx-swap-oob="outerHTML:#selected-users-container">
		for _, user := range *participants {
			<li class="select-li">
				<div class="select-content">{ user.UserName }</div>
				<button
					class="delete select-delete"
					hx-delete={ "/htmx/deselectParticipant/" +
			strconv.FormatUint(uint64(*eventId), 10) + "/" + strconv.FormatUint(uint64(user.ID), 10) }
				>x </button>
			</li>
		}
	</ul>
}

templ SearchUserList(eventId *int64, participants *[]db_entities.User) {
	<ul
		class="select-ul"
		style="display: block;"
		hx-swap-oob="outerHTML:#search-users-container"
		id="search-users-container"
	>
		for _, user := range *participants {
			<li class="select-li">
				<div class="select-content">{ user.UserName }</div>
				<button
					hx-post={ "/htmx/selectParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" +
			strconv.FormatUint(uint64(user.ID), 10) }
				>select </button>
			</li>
		}
		if (len(*participants) == 0 ) {
			<span>no users found</span>
		}
	</ul>
}

templ RemoveButton(eventId *int64, user *db_entities.User) {
	<button
		class="delete"
		hx-delete={ "/htmx/removeParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" +
	strconv.FormatUint(uint64(user.ID), 10) }
	>x</button>
}

templ ParticipantList(eventId *int64, participants *[]db_entities.User) {
	@BaseUserList(eventId, participants, RemoveButton)
}
