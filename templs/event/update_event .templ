package templs_event

import (
	"strconv"
	"go-form/sqlc/db_entities"
)

templ UpdateEvent(event *db_entities.GetCalendarEventWithOwnerRow,
 participants *[]db_entities.User,
 otherUsers *[]db_entities.User,
 selectedUsers *[]db_entities.User,
 ) {
	<h2>
		Update Event
	</h2>
	<div>
		<form
			hx-put={ "/htmx/updateEvent/" + strconv.FormatUint(uint64(event.ID), 10) }
			hx-swap="none"
		>
			<div style="padding: 2em 1em;">Owner: {event.OwnerName.String}</div>
			<input
				name="title"
				placeholder="title"
				value={ event.Title }
				required
				onkeyup="this.setCustomValidity('') // reset the validation on keyup"
				hx-on:htmx:validation:validate="if(this.value.length < 1) {
                    this.setCustomValidity('The title must be at least 1 char long') // set the validation error
                    htmx.find('#example-form').reportValidity()          // report the issue
                }"
			/>
			<input type="datetime-local" name="date-time" value={ event.DateTime.Format("2006-01-02T03:04") }/>
			<button type="submit">update</button>
		</form>
		<div id="participants-container">
			<h4>participants</h4>
			if len(*participants) > 0 {
			@ParticipantList(&event.ID, participants)
			} else {
				none
			}

		</div>
		<div id="selected-container">
			<h4>selected</h4>
			if len(*selectedUsers) > 0 {
				<button 
					hx-put={ "/htmx/inviteParticipants/" + strconv.FormatUint(uint64(event.ID), 10)  }
				> invite users </button>
			@SelectedList(&event.ID, selectedUsers)
			} else {
				none
			}
		</div>
		<div id="other-users-container">
			<h4>invite</h4>
			if len(*otherUsers) > 0 {
			@AddUsersDropDown(&event.ID, otherUsers)
			} else {
				none to invite
			}
		</div>
	</div>
}

templ BaseUserList(eventId *int64, participants *[]db_entities.User, additionalTemp func (eventId *int64, user *db_entities.User) templ.Component) {
			<ul>
				for _, user := range *participants {
					<li>
						{ user.UserName }
						if additionalTemp != nil {
							@additionalTemp(eventId, &user)
						}
					</li>
				}
			</ul>
}


templ SelectButton(eventId *int64, user *db_entities.User) {
	<button 
	hx-post={ "/htmx/addParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" + strconv.FormatUint(uint64(user.ID), 10) + "/" + "selected"  }
	 > select </button>
}

templ DeselectButton(eventId *int64, user *db_entities.User) {
	<div>
		<button 
		class="delete"
		hx-delete={ "/htmx/removeParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" + strconv.FormatUint(uint64(user.ID), 10)  }
		> X </button>
	 </div>
}

templ RemoveButton(eventId *int64, user *db_entities.User) {
	<button 
	class="delete"
	hx-delete={ "/htmx/removeParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" + strconv.FormatUint(uint64(user.ID), 10)  }
	>x</button>
}

templ AddUsersDropDown(eventId *int64, participants *[]db_entities.User) {
	@BaseUserList(eventId, participants, SelectButton)
}

templ SelectedList(eventId *int64, participants *[]db_entities.User) {
	@BaseUserList(eventId, participants, DeselectButton)
}

templ ParticipantList(eventId *int64, participants *[]db_entities.User) {
	@BaseUserList(eventId, participants, RemoveButton)
}
