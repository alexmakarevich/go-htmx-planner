package templs_event

import (
	"go-form/sqlc/db_entities"
	"strconv"
)

templ UpdateEvent(event *db_entities.GetCalendarEventWithOwnerRow,
	participants *[]db_entities.User,
	otherUsers *[]db_entities.User,
	selectedUsers *[]db_entities.User,
) {
	<script>
	// clear search drop down when not focused
	document.addEventListener('click', e => {
		if (!document.getElementById("other-users-container").contains(e.target)) {
			const parent = document.getElementById('search-users-container')
			parent.replaceChildren()
		}
	});
</script>
	<h2>
		Update Event
	</h2>
	<div style="padding-bottom: 1rem">Owner: { event.OwnerName.String }</div>
	<main>
		<section class="standard-box">
			<form
				hx-put={ "/htmx/updateEvent/" + strconv.FormatUint(uint64(event.ID), 10) }
				hx-swap="none"
				style="display: flex;
					flex-direction: column;
					flex-grow: 1;
					justify-content: center;"
			>
				<input
					name="title"
					placeholder="title"
					style="font-size: 2rem; font-weight:bold"
					value={ event.Title }
					required
					onkeyup="this.setCustomValidity('') // reset the validation on keyup"
					hx-on:htmx:validation:validate="if(this.value.length < 1) {
                    this.setCustomValidity('The title must be at least 1 char long') // set the validation error
                    htmx.find('#example-form').reportValidity()          // report the issue
                }"
				/>
				<input type="datetime-local" name="date-time" value={ event.DateTime.Format("2006-01-02T03:04") }/>
				// TODO: enable update btn when there are changes
				<button type="submit">update</button>
			</form>
		</section>
		<section class="standard-box">
			<h3 style="width:100%; text-align:center">Participants</h3>
			if len(*participants) > 0 {
				@ParticipantList(&event.ID, participants)
			} else {
				none
			}
			<div
				id="other-users-container"
				style="display: block; flex-direction:column; justify-content:center; align-items:center; position:sticky;
				margin-top: 1rem;"
			>
				<div style="display: flex; justify-content:center; align-items:center">
					<div>
						// swap=none - so that oob works
						<input
							type="search"
							name="search"
							placeholder="Search users to add..."
							hx-get={ "/htmx/searchParticipants/" + strconv.FormatUint(uint64(event.ID), 10) }
							hx-trigger="input changed delay:500ms, search, click"
							hx-indicator=".htmx-indicator"
							hx-swap="none"
							style="margin:0"
						/>
					</div>
					<button
						disabled
						id="invite-users"
						style="margin-left: 1rem;
								flex-shrink:0; 
								align-self:baseline;"
					>invite users </button>
				</div>
				<div
					style="	position: absolute;
					width: 100%;"
				>
					<span class="htmx-indicator" style="width:100%">
						Searching...
					</span>
					<ul id="selected-users-container" style=""></ul>
					<ul id="search-users-container" style=""></ul>
				</div>
			</div>
		</section>
	</main>
	// TODO: reset selection route
}

templ BaseUserList(eventId *int64, participants *[]db_entities.User, additionalTemp func(eventId *int64, user *db_entities.User) templ.Component) {
	<ul>
		for _, user := range *participants {
			<li>
				{ user.UserName }
				if additionalTemp != nil {
					@additionalTemp(eventId, &user)
				}
			</li>
		}
	</ul>
}

templ SearchAndSelectUsers(eventId *int64,
	potentialUsers *[]db_entities.User,
	selectedUsers *[]db_entities.User) {
	@SelectedList(eventId, selectedUsers)
	@SearchUserList(eventId, potentialUsers)
	if len(*selectedUsers) > 0 {
		<button
			hx-swap-oob="outerHTML:#invite-users"
			id="invite-users"
			style="
			margin-left: 1rem;
			flex-shrink:0; 
			align-self:baseline;"
			hx-put={ "/htmx/inviteParticipants/" + strconv.FormatUint(uint64(*eventId), 10) }
		>invite users </button>
	} else {
		<button
			disabled
			hx-swap-oob="outerHTML:#invite-users"
			id="invite-users"
			style="
			margin-left: 1rem;
			flex-shrink:0;
			align-self:baseline;"
		>
			invite users 
		</button>
	}
}

templ SelectedList(eventId *int64, participants *[]db_entities.User) {
	<ul
		class="select-ul"
		id="selected-users-container"
		hx-swap-oob="outerHTML:#selected-users-container"
	>
		for _, user := range *participants {
			<li class="select-li">
				<div class="select-content">{ user.UserName }</div>
				<button
					class="delete select-delete"
					hx-delete={ "/htmx/deselectParticipant/" +
			strconv.FormatUint(uint64(*eventId), 10) + "/" + strconv.FormatUint(uint64(user.ID), 10) }
				>x </button>
			</li>
		}
	</ul>
}

templ SearchUserList(eventId *int64, participants *[]db_entities.User) {
	<ul
		class="select-ul"
		style="
			    display: flex;
				align-items: stretch;
				flex-direction: column;
				"
		hx-swap-oob="outerHTML:#search-users-container"
		id="search-users-container"
	>
		for _, user := range *participants {
			<li class="select-li">
				<div class="select-content" style="flex-grow: 1;">{ user.UserName }</div>
				<button
					hx-post={ "/htmx/selectParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" +
			strconv.FormatUint(uint64(user.ID), 10) }
				>select </button>
			</li>
		}
		if (len(*participants) == 0 ) {
			<span style="width: 100%; text-align:center">no users found</span>
		}
	</ul>
}

templ RemoveButton(eventId *int64, user *db_entities.User) {
}

templ ParticipantList(eventId *int64, participants *[]db_entities.User) {
	<ul class="participants-ul" id="participants-container" hx-swap-oob="outerHTML:#selected-users-container">
		for _, user := range *participants {
			<li class="select-li">
				<div class="participants-content">{ user.UserName }</div>
				<button
					class="delete"
					hx-delete={ "/htmx/removeParticipant/" + strconv.FormatUint(uint64(*eventId), 10) + "/" +
	strconv.FormatUint(uint64(user.ID), 10) }
				>x</button>
			</li>
		}
	</ul>
}
